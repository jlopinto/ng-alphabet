{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { uuid } from 'src/app/uuid';\nimport * as i0 from \"@angular/core\";\nexport let LettersStoreService = /*#__PURE__*/(() => {\n  class LettersStoreService {\n    constructor() {\n      this._letters = new BehaviorSubject([]);\n      this.letters$ = this._letters.asObservable();\n      this.animatedLetters$ = this.letters$.pipe(map(letters => letters.filter(letter => letter.isAnimated && !letter.isFound && !letter.isLost)));\n      this.lostLetters$ = this.letters$.pipe(map(letters => letters.filter(letter => letter.isLost)));\n      this.foundLetters$ = this.letters$.pipe(map(letters => letters.filter(letter => letter.isFound)));\n      this.leftLetters$ = this.letters$.pipe(map(letters => letters.filter(letter => !letter.isFound && !letter.isLost && !letter.isAnimated)));\n      this.challenge = '';\n    }\n\n    get letters() {\n      return this._letters.getValue();\n    }\n\n    set letters(val) {\n      this._letters.next(val);\n    }\n\n    setAnimated(animatedLetter, isAnimated) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const index = this.letters.indexOf(animatedLetter);\n        this.letters[index] = Object.assign(Object.assign({}, animatedLetter), {\n          isAnimated\n        });\n        this.letters = [...this.letters];\n      });\n    }\n\n    setFound(foundLetter, isFound) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const index = this.letters.indexOf(foundLetter);\n        this.letters[index] = Object.assign(Object.assign({}, foundLetter), {\n          isFound,\n          isAnimated: false\n        });\n        this.letters = [...this.letters];\n      });\n    }\n\n    setLost(lostLetter, isLost) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const index = this.letters.indexOf(lostLetter);\n        this.letters[index] = Object.assign(Object.assign({}, lostLetter), {\n          isLost,\n          isAnimated: false\n        });\n        this.letters = [...this.letters];\n      });\n    }\n\n    setChallenge(newChallenge) {\n      if (newChallenge && this.challenge !== newChallenge) {\n        this.challenge = newChallenge;\n      }\n    }\n\n    init(game) {\n      const {\n        isRandom: shuffle,\n        challengeCase\n      } = game;\n      this.letters = [];\n      let isUppercase = false;\n      this.letters = this.challenge.split('').map(item => {\n        if (challengeCase === 'isRandomCase') {\n          isUppercase = Math.floor(Math.random() * Math.floor(2)) === 1;\n        } else {\n          isUppercase = challengeCase === 'isUppercase';\n        }\n\n        return {\n          id: uuid(),\n          item: item,\n          isAnimated: false,\n          isFound: false,\n          isLost: false,\n          isUppercase\n        };\n      });\n\n      if (shuffle) {\n        this.shuffleStore(this.letters);\n      }\n    }\n\n    shuffleStore(a) {\n      for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n      }\n\n      return a;\n    }\n\n    reset() {\n      this.letters = [];\n    }\n\n  }\n\n  LettersStoreService.ɵfac = function LettersStoreService_Factory(t) {\n    return new (t || LettersStoreService)();\n  };\n\n  LettersStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LettersStoreService,\n    factory: LettersStoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return LettersStoreService;\n})();","map":null,"metadata":{},"sourceType":"module"}