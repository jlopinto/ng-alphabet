{"ast":null,"code":"import { combineLatest } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./letter-store.service\";\nimport * as i2 from \"./sounds.service\";\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor(store, gameSound) {\n      this.store = store;\n      this.gameSound = gameSound;\n      this.started = false;\n      this.ended = false;\n      this.paused = false;\n      this.isRandom = true;\n      this.challengeCase = 'isRandomCase';\n      this.challenge = 'abcdefghijklmnopqrstuvwxyz';\n      this.loopID = null;\n      this.spawnSpeed = 5; //in seconds\n\n      this.fallingSpeed = 15; //in seconds\n\n      this.fallingSpeedRange = 1; //in seconds\n\n      this.runResult = [];\n      this.loadLocalPrefs();\n    }\n\n    start() {\n      this.store.init(this);\n      this.started = true;\n      this.ended = false;\n      this.loop();\n      this.gameSound.playBackgroundSound();\n      this.resolve();\n    }\n\n    loop() {\n      this.animateLetter();\n      this.loopID = setInterval(() => {\n        this.animateLetter();\n      }, this.spawnSpeed);\n    }\n\n    end(reason) {\n      clearInterval(this.loopID);\n      this.gameEnd.unsubscribe();\n      this.ended = true;\n      this.started = false;\n      this.runResult = {\n        reason,\n        missed: this.store.letters.filter(letter => letter.isFound === false).map(letter => {\n          return Object.assign(Object.assign({}, letter), {\n            isAnimated: false,\n            isLost: true\n          });\n        }),\n        success: this.store.letters.filter(letter => letter.isFound === true),\n        challenge: this.store.letters,\n        config: {\n          spawnSpeed: this.spawnSpeed,\n          fallingSpeed: this.fallingSpeed\n        }\n      };\n      this.store.reset();\n      this.gameSound.pauseBackgroundSound();\n    }\n\n    resolve() {\n      this.gameEnd = combineLatest([this.store.animatedLetters$, this.store.leftLetters$]).subscribe(([animatedLetters, leftLetters]) => {\n        if (!animatedLetters.length && !leftLetters.length) {\n          this.end();\n        }\n      });\n    }\n\n    animateLetter() {\n      this.store.leftLetters$.pipe(take(1)).subscribe(leftLetters => {\n        if (leftLetters.length) {\n          this.store.setAnimated(leftLetters[0], true);\n        } else {\n          clearInterval(this.loopID);\n        }\n      });\n    }\n\n    randomRangeSecond() {\n      const min = this.fallingSpeed - this.fallingSpeedRange;\n      const max = this.fallingSpeed + this.fallingSpeedRange;\n      let res = Math.floor(Math.random() * (max - min + 1) + min);\n      res = res <= 0 ? .5 : res;\n      return res + 's';\n    }\n\n    loadLocalPrefs() {\n      let prefs = localStorage.getItem('user_prefs') || false;\n\n      if (prefs) {\n        prefs = JSON.parse(prefs);\n        this.challenge = prefs.challenge;\n        this.fallingSpeed = prefs.fallingSpeed;\n        this.spawnSpeed = prefs.spawnSpeed;\n        this.isRandom = prefs.isRandom;\n        this.challengeCase = prefs.challengeCase;\n      }\n    }\n\n    saveLocalPrefs() {\n      const prefs = {\n        challenge: this.store.challenge,\n        fallingSpeed: this.fallingSpeed,\n        spawnSpeed: this.spawnSpeed,\n        challengeCase: this.challengeCase,\n        isRandom: this.isRandom\n      };\n      localStorage.setItem('user_prefs', JSON.stringify(prefs));\n    }\n\n    playSound(item, volume = 0.4) {\n      const audio = new Audio(`../../../assets/audio/${item}.mp3`);\n      audio.volume = volume;\n      return audio;\n    }\n\n  }\n\n  GameService.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.LettersStoreService), i0.ɵɵinject(i2.SoundService));\n  };\n\n  GameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac,\n    providedIn: 'root'\n  });\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module"}